-- Copyright (C) 1991-2009 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Quartus II generated Memory Initialization File (.mif)


--				Register Select
--Rigister  		Hex Sel Code (3 bits only) 		Binary Sel Code
--	A 						 0x4							100
--	B 						 0x3							011
--	X 						 0x2							010
--	Y 						 0x1							001
--	SP 						 0x0							000
--


--					ALU Select	
--Operation			Hex Sel Code (3 bits only)		Binary Sel Code
--
--  LSL						 0x6							 110
--  LSR						 0x5							 101
--	XOR						 0x4							 100
--	OR 						 0x3 							 011
--	AND						 0x2							 010
--	SUB						 0x1							 001 
--	ADD						 0x0							 000
--


					-- Bit 0		= Data					Bit 9		= REG_sel
					-- Bit 1		= Data					Bit 10		= REG_sel	
					-- Bit 2		= Data					Bit 11		= ALU_sel
					-- Bit 3		= Data					Bit 12		= ALU_sel
					-- Bit 4		= Data					Bit 13		= ALU_sel
					-- Bit 5		= Data					Bit 14		= REG_data_sel
					-- Bit 6		= Data					Bit 15		= REG_data_sel
					-- Bit 7		= Data					Bit 16		= T1
					-- Bit 8		= REG_sel				Bit 17		= T2
															Bit 18		= Write Enabled		




WIDTH=19;
DEPTH=256;

ADDRESS_RADIX = UNS;          -- The radix for address values
DATA_RADIX = BIN;             -- The radix for data values



CONTENT BEGIN			


-- **************************** ADDD START ***************************** 


					0 : 0110111111100000000;		-- NOP / INIT
				  	1 : 0100011101100001110;		-- Data to B 		#0E
					2 : 0100011101100001110;		-- B to T2
					3 : 0010011110001110000;		-- Data to A 		#70
					4 : 0010011110001110000;		-- A to T1
					5 : 0000100011100000000;		-- ADD
					6 : 0000100011100000000;		-- ADD
					7 : 0000100001000000000;		-- Result to X 		
					8 : 0000100001000000000;		-- Result to X
					9 : 0000100111100000000;		-- SUB
				   10 : 0000100111100000000;		-- SUB
				   11 : 0000100100100000000;		-- Result to Y
				   12 : 0000100100100000000;		-- Result to Y
				   13 : 0010011100100000000;		-- ResultY to T1
				   14 : 0100011101000000000;		-- ResultX to T2

-- **************************** ADDD FINISH **************************** 



-- **************************** NOP START ****************************** 

				   15 : 0000111111100000000;		-- NOP / INIT
				   16 : 0000111111100000000;		-- NOP / INIT
				   17 : 0000111111100000000;		-- NOP / INIT
				   18 : 0000111111100000000;		-- NOP / INIT
				   19 : 0000111111100000000;		-- NOP / INIT
				   20 : 0000111111100000000;		-- NOP / INIT

-- **************************** NOP FINISH ***************************** 
			   


-- **************************** EORA START ***************************** 

				   -- wren t ds alu reg   DATA 


				   21 : 0000011110000111100;		-- Data to A 		#3C
				   22 : 0000011101100001111;		-- Data to B 		#0F
				   23 : 0010011110000000000;		-- A to T1
				   24 : 0100011101100000000;		-- B to T2
				   25 : 0000101100000000000;		-- XOR
				   26 : 0000110001000000000;		-- Result to X
				   27 : 0010011101000000000;		-- X to T1

-- **************************** EORA FINISH **************************** 

-- **************************** NOP START ****************************** 

				   28 : 0000111111100000000;		-- NOP / INIT
				   29 : 0000111111100000000;		-- NOP / INIT
				   30 : 0000111111100000000;		-- NOP / INIT
				   31 : 0000111111100000000;		-- NOP / INIT
				   32 : 0000111111100000000;		-- NOP / INIT
				   33 : 0000111111100000000;		-- NOP / INIT
				   34 : 0000111111100000000;		-- NOP / INIT

-- **************************** NOP FINISH ***************************** 
		


-- **************************** ORAA START ***************************** 

				     -- wren t ds alu reg   DATA 

				   35 : 0000011110000110100;		-- Data to A 		#3C
				   36 : 0000011101100000111;		-- Data to B 		#0F
				   37 : 0010011110000000000;		-- A to T1
				   38 : 0100011101100000000;		-- B to T2
				   39 : 0000101111100000000;		-- XOR
				   49 : 0000101101000000000;		-- Result to XOR 			-- need to fix this guy	
				   41 : 0010011101000000000;		-- X to T1

-- **************************** ORRA FINISH **************************** 



-- **************************** NOP START ****************************** 

				   42 : 0000111111100000000;		-- NOP / INIT
				   43 : 0000111111100000000;		-- NOP / INIT
				   44 : 0000111111100000000;		-- NOP / INIT
				   45 : 0000111111100000000;		-- NOP / INIT
				   46 : 0000111111100000000;		-- NOP / INIT
				   47 : 0000111111100000000;		-- NOP / INIT
				   48 : 0000111111100000000;		-- NOP / INIT
				   49 : 0000111111100000000;		-- NOP / INIT


-- **************************** NOP FINISH ***************************** 


-- **************************** LSL LSR START ****************************** 
					-- does not use T1 or T2	T1 only LSL		T2 only LSR				-- Cant hold result reg to long
				     -- wren t ds alu reg   DATA 


-- Cant reenable t1 or t2, it will shift input to output ****


				   50 : 0000011110011011000;		-- Data to A        #D8         LSL = B0
				   51 : 0000011101100001110;		-- Data to B        #0E			LSR = 07
				   52 : 0100011101100000000;		-- B to T2
				   53 : 0010011110000000000;		-- A to T1
				   54 : 0000110101000000000;		-- LSR T2
				   55 : 0000110101000000000;		-- Result to X
				   56 : 0000111000100000000;		-- LSL T1
				   57 : 0000111000100000000;		-- Result to Y 		
				   58 : 0010011101000000000;		-- X to T1
				   59 : 0100011100100000000;		-- Y to T2
	

-- **************************** LSL LSR FINISH ***************************** 
		

				    
-- **************************** NOP START ****************************** 

				   60 : 0000111111100000000;		
				   61 : 0000111111100000000;	
				   62 : 0000111111100000000;	
				   63 : 0000111111100000000;	
				   64 : 0000111111100000000;	
				   65 : 0000111111100000000;	
				   66 : 0000111111100000000;	
				   67 : 0000111111100000000;	
				   68 : 0000111111100000000;	
				   69 : 0000111111100000000;

-- **************************** NOP FINISH ***************************** 

			  

-- **************************** ONE's Complement START ***************************** 

				     -- wren t ds alu reg   DATA  

				   70 : 0000011110000111100;		-- Data to A 		#3C			Onces complement = 11000011   = 0xC3
				   71 : 0000011101111111111;		-- Data to B 		#FF
				   72 : 0010011110000000000;		-- A to T1
				   73 : 0100011101100000000;		-- B to T2
				   74 : 0000101100000000000;		-- XOR
				   75 : 0000110001000000000;		-- Result to X
				   76 : 0110011101000000000;		-- X to T1 & T2
 				   77 : 0000111111100000000;	
				   78 : 0000111111100000000;	
				   79 : 0000111111100000000;

-- **************************** ONE's Complement FINISH **************************** 


-- **************************** NOP START ****************************** 

				   80 : 0000111111100000000;		
				   81 : 0000111111100000000;	
				   82 : 0000111111100000000;	
				   83 : 0000111111100000000;	
				   84 : 0000111111100000000;	
				   85 : 0000111111100000000;	
				   86 : 0000111111100000000;	
				   87 : 0000111111100000000;	
				   88 : 0000111111100000000;	
				   89 : 0000111111100000000;

-- **************************** NOP FINISH ***************************** 


-- **************************** SP PUSH START ****************************** 

				   -- wren t ds alu reg   DATA 
	
				   90 : 0000011100011111111;	-- init SP reg with 0xFF 									
				   91 : 0000011110000001010;	-- load A with 0x0A
				   92 : 1000011110000000000;	-- write A to RAM (SP address)
				   93 : 0000011101100000001;	-- load B with 1
				   94 : 0100011101100000000;	-- load B into t2
				   95 : 0001111110000000000;	-- load SP in A 		
				   96 : 0010011110000000000;	-- load A in t1
				   97 : 0000100111100000000;	-- dec SP by 1
				   98 : 0000100100000000000;	-- load result back into SP
	  			   99 : 0000000110000000000;	-- load SP in A
	  			  100 : 0010011110000000000;	-- load A in t1

-- **************************** SP PUSH FINISH ***************************** 


-- **************************** NOP START ****************************** 
				   100 : 0000111111100000000;	
				   101 : 0000111111100000000;	
				   102 : 0000111111100000000;	
				   103 : 0000111111100000000;	
				   104 : 0000111111100000000;	
				   105 : 0000111111100000000;	
				   106 : 0000111111100000000;	
				   107 : 0000111111100000000;	
				   108 : 0000111111100000000;	
				   109 : 0000111111100000000;

-- **************************** NOP FINISH ***************************** 

-- **************************** SP POP START ****************************** 

				   -- wren t ds alu reg   DATA 
	
				   110 : 0000111111100000000;	-- SP to A, data select								
				   111 : 0000011101100000001;	-- load 1 into B
				   112 : 0001111110000000000;	-- SP to A
				   113 : 0010011110000000000;	-- A to T1
				   114 : 0100011101100000000;	-- B to T2
				   115 : 0000000011100000000;	-- inc SP		
				   116 : 0000100000000000000;	-- load result into SP 
				   117 : 0001011110000000000;	-- load ram into A
				   118 : 0001011110000000000;	-- load ram into A  		-- required for ram to return value
				   119 : 0001011110000000000;	-- load ram into A
				   120 : 0010011110000000000;	-- load A into T1

-- **************************** SP POP FINISH ***************************** 


-- **************************** NOP START ****************************** 
				   
				   121 : 0000111111100000000;	
				   122 : 0000111111100000000;	
				   123 : 0000111111100000000;	
				   124 : 0000111111100000000;	
				   125 : 0000111111100000000;	
				   126 : 0000111111100000000;	
				   127 : 0000111111100000000;	
				   128 : 0000111111100000000;	
				   129 : 0000111111100000000;

-- **************************** NOP FINISH ***************************** 

-- **************************** LDY START ****************************** 

				   -- wren t ds alu reg   DATA 
	
				   130 : 0001011111100000000;	-- NOP / INIT								
				   131 : 0001011111100000000;	-- NOP / INIT

				   132 : 0000011100111111101;	-- load 0xFD into Y
				   133 : 0000011101011011111;	-- load 0xDF into X
				   134 : 0010011101000000000;	-- load X into T1
				   135 : 0100011100100000000;	-- load Y into T2		
				   136 : 0000110000100000000;	-- XOR
				   137 : 0000110000100000000;	-- result into Y
				   138 : 0010011100100000000;	-- load Y into T1
				   
				   139 : 0001011111100000000;	-- NOP / INIT
				   140 : 0001011111100000000;	-- NOP / INIT

-- **************************** LDY FINISH ***************************** 




-- **************************** NOP START ****************************** 
				   
				   141 : 0000111111100000000;	
				   142 : 0000111111100000000;	
				   143 : 0000111111100000000;	
				   144 : 0000111111100000000;	
				   145 : 0000111111100000000;	
				   146 : 0000111111100000000;	
				   147 : 0000111111100000000;	
				   148 : 0000111111100000000;	
				   149 : 0000111111100000000;

-- **************************** NOP FINISH ***************************** 

-- **************************** TBA START ****************************** 

				   -- wren t ds alu reg   DATA 
	
				   150 : 0001011111100000000;	-- NOP / INIT								
				   151 : 0001011111100000000;	-- NOP / INIT

				   152 : 0000011101110011101;	-- load 0x9D into B
				   153 : 0000011110000000000;	-- load 0x00 into A
				   154 : 0010011101100000000;	-- load B into T1
				   155 : 0100011110000000000;	-- load A into T2	
				   156 : 0000101111100000000;	-- OR
				   157 : 0000101110000000000;	-- result into A
				   158 : 0100011110000000000;	-- load A into T2

				   159 : 0001011111100000000;	-- NOP / INIT
				   160 : 0001011111100000000;	-- NOP / INIT

-- **************************** TBA FINISH ***************************** 





			[161..255] : 0001011111100000000;		-- NOP / INIT


END;
