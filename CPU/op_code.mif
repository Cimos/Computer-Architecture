-- Copyright (C) 1991-2009 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- Quartus II generated Memory Initialization File (.mif)


--				Register Select
--Rigister  		Hex Sel Code (3 bits only) 		Binary Sel Code
--	A 						 0x4							100
--	B 						 0x3							011
--	X 						 0x2							010
--	Y 						 0x1							001
--	SP 						 0x0							000
--


--					ALU Select	
--Operation			Hex Sel Code (3 bits only)		Binary Sel Code
--
--  LSR						 0x7							 111
--  ASLD_UPPER				 0x6							 110
--  ASLD_LOWWER				 0x5							 101
--	XOR						 0x4							 100
--	OR 						 0x3 							 011
--	AND						 0x2							 010
--	SUB						 0x1							 001 
--	ADD						 0x0							 000
--


					-- Bit 0		= Data					Bit 9		= REG_sel
					-- Bit 1		= Data					Bit 10		= REG_sel	
					-- Bit 2		= Data					Bit 11		= ALU_sel
					-- Bit 3		= Data					Bit 12		= ALU_sel
					-- Bit 4		= Data					Bit 13		= ALU_sel
					-- Bit 5		= Data					Bit 14		= REG_data_sel
					-- Bit 6		= Data					Bit 15		= REG_data_sel
					-- Bit 7		= Data					Bit 16		= REG_data_sel
					-- Bit 8		= REG_sel				Bit 17		= T1
															Bit 18		= T2	
															Bit 19		= Write Enabled	




WIDTH=20;
DEPTH=256;

ADDRESS_RADIX = UNS;          -- The radix for address values
DATA_RADIX = BIN;             -- The radix for data values



CONTENT BEGIN			

-- **************************** ADDD START ***************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------
-- D = AB, Z = XY

     -- wren t ds alu reg   DATA 				

0 : 01101111111100000000;		-- NOP / INIT
1 : 00000011101111111110;		-- Data to B  #FE	 0x70FE
2 : 00000011110001110000;		-- Data to A 		#70
3 : 00000011101001010101;		-- Data to X 		#55  
4 : 00000011100110100011;		-- Data to Y 		#A3
5 : 00100011101101110000;		-- B to T1 		 
6 : 01000011100101110000;		-- Y to T2 		 
7 : 00000100011100000000;		-- ADD
8 : 00000100001100000000;		-- Result to B 
9 : 00010000000100000000;		-- Carry flag to Y 
10 : 01000011100100000000;		-- Y into T2 
11 : 00100000010000000000;		-- A into T1
12 : 00000100011100000000;		-- ADD 
13 : 00000100010000000000;		-- Result to A 
14 : 00100011110001110000;		-- A to T1 		 
15 : 01000011101001110000;		-- X to T2 		 
16 : 00000100011100000000;		-- ADD
17 : 00000100010000000000;		-- Result to A 
18 : 00100011110000000000;		-- Result A to T1
19 : 01000011101100000000;		-- Result B to T2
			 	-- Result 0x70FE + 0x55A3 = 0xC6A1

-- **************************** ADDD FINISH **************************** 



-- **************************** NOP START ****************************** 

				  
20 : 00000111111100000000;		-- NOP / INIT
21 : 00000111111100000000;		-- NOP / INIT
22 : 00000111111100000000;		-- NOP / INIT
23 : 00000111111100000000;		-- NOP / INIT
				
-- **************************** NOP FINISH ***************************** 
			   


-- **************************** EORA START ***************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------
				   -- wren t ds alu reg   DATA 


24 : 00000011110000111100;		-- Data to A 		#3C		
25 : 00000011101100001111;		-- Data to B 		#0F
26 : 00100011110000000000;		-- A to T1
27 : 01000011101100000000;		-- B to T2
28 : 00000101100000000000;		-- XOR
29 : 00000110001000000000;		-- Result to X
30 : 00100011101000000000;		-- X to T1

-- **************************** EORA FINISH **************************** 

-- **************************** NOP START ****************************** 

				 
31 : 00000111111100000000;		-- NOP / INIT
32 : 00000111111100000000;		-- NOP / INIT
33 : 00000111111100000000;		-- NOP / INIT
34 : 00000111111100000000;		-- NOP / INIT

-- **************************** NOP FINISH ***************************** 
		


-- **************************** ORAA START ***************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------

				     -- wren t ds alu reg   DATA 

35 : 00000011110000110100;		-- Data to A 		#34
36 : 00000011101100000111;		-- Data to B 		#07
37 : 00100011110000000000;		-- A to T1
38 : 01000011101100000000;		-- B to T2
39 : 00000101101000000000;		-- XOR
49 : 00000101101000000000;		-- Result to X 			
41 : 00100011101000000000;		-- X to T1

-- **************************** ORRA FINISH **************************** 



-- **************************** NOP START ****************************** 

42 : 00000111111100000000;		-- NOP / INIT
43 : 00000111111100000000;		-- NOP / INIT
44 : 00000111111100000000;		-- NOP / INIT
45 : 00000111111100000000;		-- NOP / INIT
46 : 00000111111100000000;		-- NOP / INIT
47 : 00000111111100000000;		-- NOP / INIT
48 : 00000111111100000000;		-- NOP / INIT
49 : 00000111111100000000;		-- NOP / INIT


-- **************************** NOP FINISH ***************************** 


-- **************************** LSL START ****************************** 
				  
-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------

-- does not use T1 or T2	T1 only LSL		T2 only LSR				-- Cant hold result reg to long
				   
-- Cant reenable t1 or t2, it will shift input to output ****

				   -- wren t ds alu reg   DATA 

50 : 0 000 00 111 100 11011000;		-- Data to A        #D8         LSL = B0
51 : 0 000 00 111 011 00001110;		-- Data to B        #0E			LSR = 1C
52 : 0 100 00 111 011 00000000;		-- B to T2
53 : 0 001 00 111 100 00000000;		-- A to T1
54 : 0 000 01 111 010 00000000;		-- LSR T2
55 : 0 000 01 101 010 00000000;		-- Result to X
56 : 0 000 01 111 001 00000000;		-- LSL T1
57 : 0 000 01 110 001 00000000;		-- Result to Y 		
58 : 0 001 00 111 010 00000000;		-- X to T1
59 : 0 100 00 111 001 00000000;		-- Y to T2
	
				   										-- Result =  B0		1C
-- **************************** LSL FINISH ***************************** 
		

				    
-- **************************** NOP START ****************************** 

60 : 00000111111100000000;		
61 : 00000111111100000000;	
62 : 00000111111100000000;	
63 : 00000111111100000000;	
64 : 00000111111100000000;	
65 : 00000111111100000000;	
66 : 00000111111100000000;	
67 : 00000111111100000000;	
68 : 00000111111100000000;	
69 : 00000111111100000000;

-- **************************** NOP FINISH ***************************** 

			  

-- **************************** ONE's Complement START ***************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------

				     -- wren t ds alu reg   DATA  

70 : 00000011110000111100;		-- Data to A 		#3C			Onces complement = 11000011   = 0xC3
71 : 00000011101111111111;		-- Data to B 		#FF
72 : 00100011110000000000;		-- A to T1
73 : 01000011101100000000;		-- B to T2
74 : 00000101100000000000;		-- XOR
75 : 00000110001000000000;		-- Result to X
76 : 01100011101000000000;		-- X to T1 & T2
77 : 00000111111100000000;	
78 : 00000111111100000000;	
79 : 00000111111100000000;

-- **************************** ONE's Complement FINISH **************************** 


-- **************************** NOP START ****************************** 

80 : 00000111111100000000;		
81 : 00000111111100000000;	
82 : 00000111111100000000;	
83 : 00000111111100000000;	
84 : 00000111111100000000;	
85 : 00000111111100000000;	
86 : 00000111111100000000;	
87 : 00000111111100000000;	
88 : 00000111111100000000;	
89 : 00000111111100000000;

-- **************************** NOP FINISH ***************************** 


-- **************************** SP PUSH START ****************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------

				   -- wren t ds alu reg   DATA 
	
90 : 00000011100011111111;	-- init SP reg with 0xFF 									
91 : 00000011110000001010;	-- load A with 0x0A
92 : 10000011110000000000;	-- write A to RAM (SP address)
93 : 00000011101100000001;	-- load B with 1
94 : 01000011101100000000;	-- load B into t2
95 : 00001111110000000000;	-- load SP in A 		
96 : 00100011110000000000;	-- load A in t1
97 : 00000100111100000000;	-- dec SP by 1
98 : 00000100100000000000;	-- load result back into SP
99 : 00000000110000000000;	-- load SP in A
100 : 00100011110000000000;	-- load A in t1

-- **************************** SP PUSH FINISH ***************************** 


-- **************************** NOP START ****************************** 
100 : 00000111111100000000;	
101 : 00000111111100000000;	
102 : 00000111111100000000;	
103 : 00000111111100000000;	
104 : 00000111111100000000;	
105 : 00000111111100000000;	
106 : 00000111111100000000;	
107 : 00000111111100000000;	
108 : 00000111111100000000;	
109 : 00000111111100000000;

-- **************************** NOP FINISH ***************************** 

-- **************************** SP POP START ****************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------

				   -- wren t ds alu reg   DATA 
	
110 : 00000111111100000000;	-- SP to A, data select								
111 : 00000011101100000001;	-- load 1 into B
112 : 00001111110000000000;	-- SP to A
113 : 00100011110000000000;	-- A to T1
114 : 01000011101100000000;	-- B to T2
115 : 00000000011100000000;	-- inc SP		
116 : 00000100000000000000;	-- load result into SP 
117 : 00001011110000000000;	-- load ram into A
118 : 00001011110000000000;	-- load ram into A  		-- required for ram to return value
119 : 00001011110000000000;	-- load ram into A
120 : 00100011110000000000;	-- load A into T1

-- **************************** SP POP FINISH ***************************** 


-- **************************** NOP START ****************************** 
				   
121 : 00000111111100000000;	
122 : 00000111111100000000;	
123 : 00000111111100000000;	
124 : 00000111111100000000;	
125 : 00000111111100000000;	
126 : 00000111111100000000;	
127 : 00000111111100000000;	
128 : 00000111111100000000;	
129 : 00000111111100000000;

-- **************************** NOP FINISH ***************************** 

-- **************************** LDY START ****************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------

				   -- wren t ds alu reg   DATA 
	
130 : 00001011111100000000;	-- NOP / INIT								
131 : 00001011111100000000;	-- NOP / INIT
132 : 00000011100111111101;	-- load 0xFD into Y
133 : 00000011101011011111;	-- load 0xDF into X
134 : 00100011101000000000;	-- load X into T1
135 : 01000011100100000000;	-- load Y into T2		
136 : 00000110000100000000;	-- XOR
137 : 00000110000100000000;	-- result into Y
138 : 00100011100100000000;	-- load Y into T1			   
139 : 00001011111100000000;	-- NOP / INIT
140 : 00001011111100000000;	-- NOP / INIT

-- **************************** LDY FINISH ***************************** 




-- **************************** NOP START ****************************** 
				   
141 : 00000111111100000000;	
142 : 00000111111100000000;	
143 : 00000111111100000000;	
144 : 00000111111100000000;	
145 : 00000111111100000000;	
146 : 00000111111100000000;	
147 : 00000111111100000000;	
148 : 00000111111100000000;	
149 : 00000111111100000000;

-- **************************** NOP FINISH ***************************** 

-- **************************** TBA START ****************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------

				   -- wren t ds alu reg   DATA 
	
150 : 00001011111100000000;	-- NOP / INIT								
151 : 00001011111100000000;	-- NOP / INIT
152 : 00000011101110011101;	-- load 0x9D into B
153 : 00000011110000000000;	-- load 0x00 into A
154 : 00100011101100000000;	-- load B into T1
155 : 01000011110000000000;	-- load A into T2	
156 : 00000101111100000000;	-- OR
157 : 00000101110000000000;	-- result into A
158 : 01000011110000000000;	-- load A into T2
159 : 00001011111100000000;	-- NOP / INIT
				
-- **************************** TBA FINISH ***************************** 

-- **************************** NOP START ****************************** 

160 : 00000111111100000000;	
161 : 00000111111100000000;	
162 : 00000111111100000000;	
163 : 00000111111100000000;	
164 : 00000111111100000000;	
165 : 00000111111100000000;	
166 : 00000111111100000000;	
167 : 00000111111100000000;	
168 : 00000111111100000000;	
169 : 00000111111100000000;

-- **************************** NOP FINISH ***************************** 

-- **************************** ASLD START ***************************** 

-- ---------------------- WORKING WORKING WORKING WORKIN ----------------------

				    -- wren t ds alu reg   DATA 

170 : 00000011110001010100;		-- Data to A       #55   		   
171 : 00000011101110011011;		-- Data to B        #B3			= 0x55B3   
172 : 01000011101100000000;		-- B to T2
173 : 00100011110000000000;		-- A to T1
174 : 00000111001000000000;		-- ASLD_UPPER
175 : 00000111001000000000;		-- Result to X
176 : 00000110100100000000;		-- ASLD_Lowwer 
177 : 00000110100100000000;		-- Result to Y 		
178 : 00100011101000000000;		-- X to T1
179 : 01000011100100000000;		-- Y to T2
		
													-- shifted ASLD 0x55B3 
													-- Result = 0xAB76 = 101010101100110

-- **************************** ASLD FINISH **************************** 



-- **************************** EOF EOF EOF **************************** 
-- **************************** EOF EOF EOF **************************** 
		


[180..255] : 00001011111100000000;		-- NOP / INIT


END;
